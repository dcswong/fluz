{"version":3,"sources":["logo.svg","components/ProductView.js","App.js","serviceWorker.js","modules/homepage/index.js","index.js"],"names":["module","exports","__webpack_require__","p","ProductView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rating","react_default","a","createElement","src","nextValue","prevValue","name","setState","_this2","products","console","log","className","map","product","i","key","image","title","price","react_star_rating_component_default","starCount","onStarClick","bind","Component","App","components_ProductView","defaultProps","Boolean","window","location","hostname","match","_React$Component","Home","apply","arguments","inherits","createClass","value","React","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MCoDzBC,cA9Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,GAHOR,6EAQjB,OACES,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,wIAKDC,EAAWC,EAAWC,GAChCZ,KAAKa,SAAS,CAACR,OAAQK,qCAGhB,IAAAI,EAAAd,KACHe,EAAWf,KAAKJ,MAAMmB,SAE1B,OADAC,QAAQC,IAAIF,GAEVT,EAAAC,EAAAC,cAAA,OAAKU,UAAU,WACZH,EAASI,IAAI,SAACC,EAASC,GACtB,OACEf,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAGH,UAAU,eACrBZ,EAAAC,EAAAC,cAAA,OAAKC,IAAKW,EAAQG,MAAOD,IAAKD,IAC9Bf,EAAAC,EAAAC,cAAA,KAAGU,UAAU,QAAQE,EAAQI,OAC7BlB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,gBACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACbZ,EAAAC,EAAAC,cAAA,KAAGU,UAAU,SAAb,IAAuBE,EAAQK,QAEjCnB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,SACbZ,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAqBK,KAAK,OAAOe,UAAW,EAAGC,YAAad,EAAKc,YAAYC,KAAKf,MAGpFR,EAAAC,EAAAC,cAAA,UAAQU,UAAU,aAAlB,2BAtCUY,aCCpBC,mLAEF,OACEzB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,eACbZ,EAAAC,EAAAC,cAACwB,EAAD,CAAajB,SAAUf,KAAKJ,MAAMmB,oBAL1Be,aAYHC,IAEfA,EAAIE,aAAe,CACjBlB,SAAU,CACR,CACEQ,MAAO,iGACPC,MAAO,WACPC,MAAO,KAET,CACEF,MAAO,iGACPC,MAAO,WACPC,MAAO,OClBOS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DChBN,SAAAC,GAAA,SAAAC,IAAA,OAAA1C,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,GAAA1C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAAC,MAAAzC,KAAA0C,YAAA5C,OAAA6C,EAAA,EAAA7C,CAAA0C,EAAAD,GAAAzC,OAAA8C,EAAA,EAAA9C,CAAA0C,EAAA,EAAAlB,IAAA,SAAAuB,MAAA,WAEI,OACEvC,EAAAC,EAAAC,cAAA,qBAHN,CAAmCsC,IAAMhB,WCOzCiB,IAASC,OACP1C,EAAAC,EAAAC,cAACyC,EAAD,MAWAC,SAASC,eAAe,SFwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9517a1f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nimport StarRatingComponent from 'react-star-rating-component';\n\n\nclass ProductView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rating: 1\n    };\n  }\n\n  renderImage() {\n    return(\n      <div>\n      <img src=\"https://cdn.shopify.com/s/files/1/0054/5239/8659/products/image2xxl_8_370x472.jpg?v=1538454982\"/>\n      </div>\n    )\n  }\n\n  onStarClick(nextValue, prevValue, name) {\n    this.setState({rating: nextValue});\n  }\n\n  render() {\n    var products = this.props.products;\n    console.log(products);\n    return (\n      <div className=\"product\">\n        {products.map((product, i) => {\n          return (\n            <div key={i} className=\"productGrid\">\n              <img src={product.image} key={i}/>\n              <p className=\"text\">{product.title}</p>\n              <div className=\"context-wrap\">\n                <div className=\"left\">\n                  <p className=\"price\">${product.price}</p>\n                </div>\n                <div className=\"right\">\n                  <StarRatingComponent name=\"rate\" starCount={5} onStarClick={this.onStarClick.bind(this)}>\n                  </StarRatingComponent>\n                </div>\n                <button className=\"addToCart\">Add to Cart</button>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\nexport default ProductView;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ProductView from './components/ProductView';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"productGrid\">\n          <ProductView products={this.props.products}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nApp.defaultProps = {\n  products: [\n    {\n      image: 'https://cdn.shopify.com/s/files/1/0054/5239/8659/products/image2xxl_8_370x472.jpg?v=1538454982',\n      title: 'Product1',\n      price: 200\n    },\n    {\n      image: 'https://cdn.shopify.com/s/files/1/0054/5239/8659/products/image2xxl_8_370x472.jpg?v=1538454982',\n      title: 'Product2',\n      price: 100\n    }\n  ]\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nexport default (class Home extends React.Component {\n  render () {\n    return (\n      <div>\n      Hi\n      </div>\n    )\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport Home from './modules/homepage';\n\nReactDOM.render(\n  <App />,\n  // <Router>\n  //\n  //   <ul>\n  //     <li><Link to=\"/app\">Testing</Link></li>\n  //   </ul>\n  //\n  //   <Switch>\n  //     <Route exact path=\"/home\" component={Home}/>\n  //   </Switch>\n  // </Router>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}